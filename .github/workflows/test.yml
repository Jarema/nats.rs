name: Rust

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  fmt_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check

  clippy_check:
    runs-on: ubuntu-latest
    steps:
      - name: Cache Rust
        uses: actions/cache@v1
        env:
          cache-name: cache-rust
        with:
          path: target
          key: ${{ runner.os }}-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
          override: true
      - run: rustup component add clippy
      - uses: actions-rs/clippy-check@v1.0.7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

  default:
    name: Cargo Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]
    steps:
      - name: Cache Rust
        uses: actions/cache@v1
        env:
          cache-name: cache-rust
        with:
          path: target
          key: ${{ runner.os }}-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-
      - name: Cache Go
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod              # Module download cache
            ~/.cache/go-build         # Build cache (Linux)
            ~/Library/Caches/go-build # Build cache (Mac)
            '%LocalAppData%\go-build' # Build cache (Windows)
          key: ${{ runner.os }}-go-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-go-
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.16'
      - name: install nats-server
        run: go get github.com/nats-io/nats-server/v2
      - name: cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test

  fault-injection:
    name: Fault Injection
    runs-on: ubuntu-latest
    steps:
      - name: Cache Rust
        uses: actions/cache@v1
        env:
          cache-name: cache-rust-fault-injection
        with:
          path: target
          key: ${{ runner.os }}-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-
      - uses: actions/checkout@v2
      - name: fault injection test
        env:
          RUST_LOG: trace
        run: |
          rustup update
          cargo test reconnect_test --features=fault_injection -- --ignored

  doctests:
    name: doctests
    runs-on: ubuntu-latest
    steps:
      - name: Cache Rust
        uses: actions/cache@v1
        env:
          cache-name: cache-rust
        with:
          path: target
          key: ${{ runner.os }}-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.16'
      - name: install nats-server
        run: go get github.com/nats-io/nats-server/v2
      - name: Docs test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --doc

  examples:
    name: examples
    runs-on: ubuntu-latest
    steps:
      - name: Cache Rust
        uses: actions/cache@v1
        env:
          cache-name: cache-rust
        with:
          path: target
          key: ${{ runner.os }}-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.16'
      - name: install nats-server
        run: go get github.com/nats-io/nats-server/v2
      - name: examples check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --examples

  msrv:
    name: MSRV
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, 1.52.0]
    steps:
      - name: Cache Rust
        uses: actions/cache@v1
        env:
          cache-name: cache-rust
        with:
          path: target
          key: ${{ runner.os }}-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - name: Check
        uses: actions-rs/cargo@v1
        with:
          command: check
